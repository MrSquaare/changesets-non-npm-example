name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest

    outputs:
      published: ${{ steps.changesets.outputs.published }}
      publishedPackages: ${{ steps.changesets.outputs.publishedPackages}}

    steps:
      - uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: "latest"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          cache: "pnpm"

      - name: Install Node.js dependencies
        shell: bash
        run: pnpm install

      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          version: pnpm run version
          publish: pnpm run publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  go-build-upload:
    name: "Go: Build and upload"
    runs-on: ubuntu-latest

    needs: release
    if: ${{ needs.release.outputs.published == 'true' && contains(fromJson(needs.release.outputs.publishedPackages).*.name, 'go') }}

    steps:
      - name: Get release tag
        id: get_release_tag
        run: |
          tag=go@$(echo '${{ needs.release.outputs.publishedPackages }}' | jq -r '.[] | select(.name == "go") | .version')
          echo ::set-output name=tag::$tag

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
            go-version: stable

      - name: Set current and previous git tag
        shell: bash 
        run: |
          tags=$(git tag -l "go@*")
          current_tag=$(echo "$tags" | sort -V | tail -n 1)
          previous_tag=$(echo "$tags" | sort -V | tail -n 2 | head -n 1)
          formatted_current_tag=$(echo "$current_tag" | sed 's/^go@/v/')
          formatted_previous_tag=$(echo "$previous_tag" | sed 's/^go@/v/')

          echo "GORELEASER_CURRENT_TAG=$formatted_current_tag" >> $GITHUB_ENV
          echo "GORELEASER_PREVIOUS_TAG=$formatted_previous_tag" >> $GITHUB_ENV

      - name: Run GoReleaser
        id: goreleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: build --id go --skip validate --clean

      - name: Upload assets
        shell: bash
        run: |
          for artifact in $(echo '${{ steps.goreleaser.outputs.artifacts }}' | jq -c '.[]'); do
              type=$(echo "$artifact" | jq -r '.type')

              case $type in
              Binary)
                  path=$(echo "$artifact" | jq -r '.path')
                  target=$(echo "$artifact" | jq -r '.target')
                  binary_name=$(echo "$artifact" | jq -r '.extra.Binary')
                  binary_ext=$(echo "$artifact" | jq -r '.extra.Ext')
                  filename="${binary_name}-${target}${binary_ext}"
                  echo "Uploading $filename from $path"
                  cp "$path" "$filename"
                  gh release upload ${{ steps.get_release_tag.outputs.tag }} "$filename"
                  ;;
              *)
                  echo "Unknown artifact type: $type"
                  ;;
              esac
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  rust-build-upload:
    name: "Rust: Build and upload"
    runs-on: ubuntu-latest

    needs: release
    if: ${{ needs.release.outputs.published == 'true' && contains(fromJson(needs.release.outputs.publishedPackages).*.name, 'rust') }}

    steps:
      - name: Get release tag
        id: get_release_tag
        run: |
          tag=rust@$(echo '${{ needs.release.outputs.publishedPackages }}' | jq -r '.[] | select(.name == "rust") | .version')
          echo ::set-output name=tag::$tag

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
            go-version: stable

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
            toolchain: stable

      - name: Setup Zig
        uses: mlugg/setup-zig@v1

      - name: Instal cargo zigbuild
        run: cargo install --locked cargo-zigbuild

      - name: Set current and previous git tag
        shell: bash 
        run: |
          tags=$(git tag -l "rust@*")
          current_tag=$(echo "$tags" | sort -V | tail -n 1)
          previous_tag=$(echo "$tags" | sort -V | tail -n 2 | head -n 1)
          formatted_current_tag=$(echo "$current_tag" | sed 's/^rust@/v/')
          formatted_previous_tag=$(echo "$previous_tag" | sed 's/^rust@/v/')

          echo "GORELEASER_CURRENT_TAG=$formatted_current_tag" >> $GITHUB_ENV
          echo "GORELEASER_PREVIOUS_TAG=$formatted_previous_tag" >> $GITHUB_ENV

      - name: Run GoReleaser
        id: goreleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: build --id rust --skip validate --clean

      - name: Upload assets
        shell: bash
        run: |
          for artifact in $(echo '${{ steps.goreleaser.outputs.artifacts }}' | jq -c '.[]'); do
              type=$(echo "$artifact" | jq -r '.type')

              case $type in
              Binary)
                  path=$(echo "$artifact" | jq -r '.path')
                  target=$(echo "$artifact" | jq -r '.target')
                  binary_name=$(echo "$artifact" | jq -r '.extra.Binary')
                  binary_ext=$(echo "$artifact" | jq -r '.extra.Ext')
                  filename="${binary_name}-${target}${binary_ext}"
                  echo "Uploading $filename from $path"
                  cp "$path" "$filename"
                  gh release upload ${{ steps.get_release_tag.outputs.tag }} "$filename"
                  ;;
              *)
                  echo "Unknown artifact type: $type"
                  ;;
              esac
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
